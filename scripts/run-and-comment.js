#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const BASE_BRANCH = process.env.BASE_BRANCH || 'main';
const DEPTH = process.env.DEPTH || '3';

// Get PR details from GitHub context
const eventPath = process.env.GITHUB_EVENT_PATH;
const repository = process.env.GITHUB_REPOSITORY;
const [owner, repo] = repository.split('/');

let prNumber;
try {
  const event = JSON.parse(fs.readFileSync(eventPath, 'utf8'));
  prNumber = event.pull_request?.number;
  
  if (!prNumber) {
    console.log('Not a pull request event, skipping...');
    process.exit(0);
  }
} catch (error) {
  console.error('Failed to parse GitHub event:', error);
  process.exit(1);
}

// Run comment-catcher CLI
console.log('Running comment-catcher...');
let reportPath;
try {
  reportPath = path.join(process.cwd(), 'comment-catcher-report.md');
  execSync(`comment-catcher check -b ${BASE_BRANCH} -d ${DEPTH} -f markdown -o ${reportPath}`, {
    stdio: 'inherit',
    env: {
      ...process.env,
      ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY
    }
  });
} catch (error) {
  // CLI returns non-zero when issues found, which is expected
  console.log('Comment-catcher completed');
}

// Read the report
let reportContent;
try {
  if (fs.existsSync(reportPath)) {
    reportContent = fs.readFileSync(reportPath, 'utf8');
  } else {
    reportContent = '‚úÖ No outdated comments detected. Great job keeping documentation up to date!';
  }
} catch (error) {
  console.error('Failed to read report:', error);
  reportContent = '‚ö†Ô∏è Comment analysis completed but failed to read report.';
}

// Prepare comment body
const commentBody = `## üîç Comment Catcher Results

${reportContent}

---
*This comment was automatically generated by [Comment Catcher](https://github.com/zachicecreamcohn/comment-catcher)*`;

// Post or update PR comment
async function postComment() {
  const commentMarker = '<!-- comment-catcher-bot -->';
  const fullCommentBody = `${commentMarker}\n${commentBody}`;

  try {
    // Check for existing comment
    const commentsResponse = await fetch(
      `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/comments`,
      {
        headers: {
          'Authorization': `Bearer ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'comment-catcher-action'
        }
      }
    );

    if (!commentsResponse.ok) {
      throw new Error(`Failed to fetch comments: ${commentsResponse.statusText}`);
    }

    const comments = await commentsResponse.json();
    const existingComment = comments.find(comment => 
      comment.body?.includes(commentMarker)
    );

    if (existingComment) {
      // Update existing comment
      console.log(`Updating existing comment #${existingComment.id}`);
      const updateResponse = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/issues/comments/${existingComment.id}`,
        {
          method: 'PATCH',
          headers: {
            'Authorization': `Bearer ${GITHUB_TOKEN}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json',
            'User-Agent': 'comment-catcher-action'
          },
          body: JSON.stringify({ body: fullCommentBody })
        }
      );

      if (!updateResponse.ok) {
        throw new Error(`Failed to update comment: ${updateResponse.statusText}`);
      }
      console.log('Successfully updated PR comment');
    } else {
      // Create new comment
      console.log('Creating new PR comment');
      const createResponse = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/comments`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${GITHUB_TOKEN}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json',
            'User-Agent': 'comment-catcher-action'
          },
          body: JSON.stringify({ body: fullCommentBody })
        }
      );

      if (!createResponse.ok) {
        throw new Error(`Failed to create comment: ${createResponse.statusText}`);
      }
      console.log('Successfully created PR comment');
    }
  } catch (error) {
    console.error('Failed to post comment:', error);
    process.exit(1);
  }
}

postComment().catch(error => {
  console.error('Unexpected error:', error);
  process.exit(1);
});
