#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const BASE_BRANCH = process.env.BASE_BRANCH || 'main';
const DEPTH = process.env.DEPTH || '3';

// Get PR details from GitHub context
const eventPath = process.env.GITHUB_EVENT_PATH;
const repository = process.env.GITHUB_REPOSITORY;
const [owner, repo] = repository.split('/');

let prNumber;
try {
  const event = JSON.parse(fs.readFileSync(eventPath, 'utf8'));
  prNumber = event.pull_request?.number;
  
  if (!prNumber) {
    console.log('Not a pull request event, skipping...');
    process.exit(0);
  }
} catch (error) {
  console.error('Failed to parse GitHub event:', error);
  process.exit(1);
}

// Validate API key is present
if (!process.env.ANTHROPIC_API_KEY) {
  console.error('❌ Error: ANTHROPIC_API_KEY environment variable is not set');
  process.exit(1);
}
const apiKey = process.env.ANTHROPIC_API_KEY;
const keyLength = apiKey.length;
const keyPrefix = apiKey.substring(0, 7);
const keySuffix = apiKey.substring(apiKey.length - 4);
console.log(`✓ ANTHROPIC_API_KEY is set (length: ${keyLength}, prefix: ${keyPrefix}..., suffix: ...${keySuffix})`);

// Check for common issues
if (apiKey.includes('\n') || apiKey.includes('\r')) {
  console.warn('⚠️  WARNING: API key contains newline characters');
}
if (apiKey.startsWith(' ') || apiKey.endsWith(' ')) {
  console.warn('⚠️  WARNING: API key has leading or trailing spaces');
}
if (!apiKey.startsWith('sk-ant-')) {
  console.warn('⚠️  WARNING: API key does not start with expected "sk-ant-" prefix');
}

// Ensure base branch ref is available
console.log(`Fetching base branch: ${BASE_BRANCH}...`);
try {
  execSync(`git fetch origin ${BASE_BRANCH}:${BASE_BRANCH}`, { stdio: 'pipe' });
  console.log(`Successfully fetched ${BASE_BRANCH}`);
} catch (fetchError) {
  console.log(`Note: Could not fetch ${BASE_BRANCH} (may already exist locally)`);
}

// Run comment-catcher CLI
console.log('Running comment-catcher...');
console.log(`Environment check - ANTHROPIC_API_KEY present: ${!!process.env.ANTHROPIC_API_KEY}`);
let reportPath;
let cliError = null;
try {
  reportPath = path.join(process.cwd(), 'comment-catcher-report.md');
  
  // Build the environment explicitly
  const cliEnv = {
    ...process.env,
    ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY,
    ANTHROPIC_BASE_URL: process.env.ANTHROPIC_BASE_URL
  };
  
  console.log(`CLI will receive ANTHROPIC_API_KEY: ${!!cliEnv.ANTHROPIC_API_KEY}`);
  
  execSync(`comment-catcher check -b ${BASE_BRANCH} -d ${DEPTH} -f markdown -o ${reportPath}`, {
    stdio: 'inherit', // Changed from 'pipe' to see actual error output
    env: cliEnv
  });
  console.log('Comment-catcher completed successfully');
} catch (error) {
  // Capture the error output for analysis
  const errorOutput = error.stderr?.toString() || error.stdout?.toString() || error.message || '';
  
  // Check if this is a real error (missing dependencies, etc.) or just "issues found"
  if (errorOutput.includes('Cannot find package') || 
      errorOutput.includes('MODULE_NOT_FOUND') ||
      errorOutput.includes('ANTHROPIC_API_KEY') ||
      !fs.existsSync(reportPath)) {
    // This is a real error, not just "issues found"
    cliError = errorOutput;
    console.error('Error running comment-catcher:', errorOutput);
  } else {
    // CLI returns non-zero when issues found, which is expected behavior
    console.log('Comment-catcher completed (found issues)');
  }
}

// Read the report
let reportContent;
try {
  if (cliError) {
    // Real error occurred
    reportContent = `❌ **Comment Catcher failed to run**

\`\`\`
${cliError}
\`\`\`

Please check the [action logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) for details.`;
  } else if (fs.existsSync(reportPath)) {
    reportContent = fs.readFileSync(reportPath, 'utf8');
  } else {
    reportContent = '✅ No outdated comments detected. Great job keeping documentation up to date!';
  }
} catch (error) {
  console.error('Failed to read report:', error);
  reportContent = '⚠️ Comment analysis completed but failed to read report.';
}

// Prepare comment body
const commentBody = `## 🔍 Comment Catcher Results

${reportContent}

---
*This comment was automatically generated by [Comment Catcher](https://github.com/zachicecreamcohn/comment-catcher)*`;

// Post PR comment
async function postComment() {
  const fullCommentBody = commentBody;

  // Support GitHub Enterprise with custom API endpoint
  const apiBaseUrl = process.env.GITHUB_API_URL || 'https://api.github.com';

  try {
    // Create new comment
    console.log('Creating new PR comment');
    const createResponse = await fetch(
      `${apiBaseUrl}/repos/${owner}/${repo}/issues/${prNumber}/comments`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
          'User-Agent': 'comment-catcher-action'
        },
        body: JSON.stringify({ body: fullCommentBody })
      }
    );

    if (!createResponse.ok) {
      throw new Error(`Failed to create comment: ${createResponse.statusText}`);
    }
    console.log('Successfully created PR comment');
  } catch (error) {
    console.error('Failed to post comment:', error);
    process.exit(1);
  }
}

postComment().catch(error => {
  console.error('Unexpected error:', error);
  process.exit(1);
});
